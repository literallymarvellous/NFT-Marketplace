import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { ethers } from "ethers";
import Web3Modal from "web3modal";

import NFT from "../artifacts/contracts/NFT.sol/NFT.json";
import Market from "../artifacts/contracts/NFTMarket.sol/NFTMarket.json";
import { nftAddress, nftMarketAddress } from "../config";

export interface meta {
    image: string;
    description: string;
    name: string;
}

type NFT = {
  price: string;
  tokenId: number;
  seller: string;
  image: string;
  name: string;
  description: string;
};

const Home: NextPage = () => {
  const [nfts, setNfts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  const loadNFTs = async () => {
    const provider = new ethers.providers.JsonRpcProvider(
      "https://rpc-mumbai.matic.today"
    );
    const marketContract = new ethers.Contract(
      nftMarketAddress,
      Market.abi,
      provider
    );
    const nftContract = new ethers.Contract(nftAddress, NFT.abi, provider);

    const data = await marketContract.fetchMarketItems();

    const items = await Promise.all(
      data.map(async (i) => {
        const tokenUri = await nftContract.tokenURI(i.tokenId);
        const res = await fetch(tokenUri);
        const meta: meta = await res.json();
        let price = ethers.utils.formatUnits(i.price.toString(), "ether");
        let item = {
          price: price.toString(),
          tokenId: i.itemId.toNumber(),
          seller: i.seller,
          image: meta.image,
          name: meta.name,
          description: meta.description,
        };

        return item;
      })
    );

    setNfts(items);
    setIsLoading(false);
  };

  const buyNFT = async (nft: NFT) => {
    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);
    const signer = provider.getSigner();

    const marketContract = new ethers.Contract(
      nftMarketAddress,
      Market.abi,
      signer
    );
    const price = ethers.utils.parseUnits(nft.price, "ether");

    const tx = await marketContract.saleItem(nftAddress, nft.tokenId, {
      value: price,
    });
    await tx.wait();
    loadNFTs();
  };

  useEffect(() => {
    loadNFTs();
  }, []);

  if (!isLoading && !nfts.length)
    return <h1 className="px-20 py-10 text-3xl">No items in marketplace</h1>;

  return (
    <div className="flex justify-center">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="px-4" style={{ maxWidth: "1600px" }}>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4">
          {nfts.map((nft, i) => (
            <div key={i} className="border shadow rounded-xl overflow-hidden">
              <img src={nft.image} />
              <div className="p-4">
                <p
                  style={{ height: "64px" }}
                  className="text-2xl font-semibold"
                >
                  {nft.name}
                </p>
                <div style={{ height: "70px", overflow: "hidden" }}>
                  <p className="text-gray-400">{nft.description}</p>
                </div>
              </div>
              <div className="p-4 bg-black">
                <p className="text-2xl mb-4 font-bold text-white">
                  {nft.price} Matic
                </p>
                <button
                  onClick={() => buyNFT(nft)}
                  className="w-full bg-pink-500 text-white font-bold py-2 px-12 rounded"
                >
                  Buy
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Home;
